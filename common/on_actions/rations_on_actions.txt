on_actions = {

	on_startup = {
		effect = {
			
		}
	}

	on_daily = {
		effect = {


			#### daily consumption

			set_variable = { rations_consumption = 0 }

			set_variable = { infantry_consumption = num_battalions_with_type@infantry }
			multiply_variable = { infantry_consumption = 0.1 }
			set_variable = { artillery_consumption = num_battalions_with_type@artillery }
			multiply_variable = { artillery_consumption = 0.05 }
			set_variable = { light_consumption = num_battalions_with_type@light_armor }
			multiply_variable = { light_consumption = 0.05 }
			set_variable = { medium_consumption = num_battalions_with_type@medium_armor }
			multiply_variable = { medium_consumption = 0.05 }
			set_variable = { heavy_consumption = num_battalions_with_type@heavy_armor }
			multiply_variable = { heavy_consumption = 0.05 }
			set_variable = { remaining_consumption = num_battalions }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@infantry }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@artillery }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@light_armor }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@medium_armor }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@heavy_armor }
			multiply_variable = { remaining_consumption = 0.1 }

			set_variable = { potential_consumption = 0 }
			add_to_variable = { potential_consumption = infantry_consumption }
			add_to_variable = { potential_consumption = artillery_consumption }
			add_to_variable = { potential_consumption = light_consumption }
			add_to_variable = { potential_consumption = medium_consumption }
			add_to_variable = { potential_consumption = heavy_consumption }
			add_to_variable = { potential_consumption = remaining_consumption }
			set_variable = { potential_consumption_max = potential_consumption }
			multiply_variable = { potential_consumption_max = 1.0 } 	## Sets Max Consumption; if all units were attacking
			divide_variable = { potential_consumption = num_divisions }	## Evenly distributes potential consumption per division

			set_variable = { commanded_divisions = 0 }
			set_variable = { divisions_in_offensive_combat = 0 }
			set_variable = { divisions_in_defensive_combat = 0 }

			### Used to find what divisions are in defensive or offensive combat ###
			every_army_leader = {
				limit = {
					is_leading_army_group = no
				}
				add_to_variable = { ROOT.commanded_divisions = num_units }
				add_to_variable = { ROOT.divisions_in_offensive_combat = num_units_offensive_combats }
				add_to_variable = { ROOT.divisions_in_defensive_combat = num_units_defensive_combats }
			}

			# total unit consumption
			set_variable = { divisions_in_field = num_divisions }
			multiply_variable = { divisions_in_field = potential_consumption }
			multiply_variable = { divisions_in_field = 0.50 }

			# offensive units consumption
			multiply_variable = { divisions_in_offensive_combat = potential_consumption }
			multiply_variable = { divisions_in_offensive_combat = 0.50 }

			# defensive units consumption
			multiply_variable = { divisions_in_defensive_combat = potential_consumption }
			multiply_variable = { divisions_in_defensive_combat = 0.25 }

			set_variable = { daily_rations_need = divisions_in_field }
			add_to_variable = { daily_rations_need = divisions_in_defensive_combat }
			add_to_variable = { daily_rations_need = divisions_in_offensive_combat }
			clamp_variable = { 
				var = daily_rations_need 
				min = 0
			}


			subtract_from_variable = { rations_variable = daily_rations_need }


			################## end daily consumption




			#### daily addition

			set_variable = { rations_daily = 0 }

			# base gain
			set_variable = { modifier_gain = resource@rations }
			multiply_variable = { modifier_gain = 0.10 }	## 0.10 is the factor that controls how much rations per resource
			add_to_variable = { rations_daily = modifier_gain }

			# factor
			set_variable = { rations_factor_calc = 1 }
			add_to_variable = { rations_factor_calc = modifier@rations_factor }
			clamp_variable = { 
				var = rations_factor_calc 
				min = 0 
				#max = 0
			}

			multiply_variable = { rations_daily = rations_factor_calc }


			add_to_variable = { rations_variable = rations_daily }

			################## end daily addition



			set_variable = { rations_balance = rations_daily }
			subtract_from_variable = { rations_balance = daily_rations_need }
			set_variable = { rations_balance_int = rations_balance }
			if = {
				limit = {
					check_variable = { rations_balance < 0 }
				}
				multiply_variable = { rations_balance_int = -1 }
			}



			set_variable = { rations_max = 0 }
			add_to_variable = { rations_max = owned_controlled_states }
			multiply_variable = { rations_max = 10 }
			set_variable = { rations_storage = modifier@rations_capacity_k }
			add_to_variable = { rations_max = rations_storage }

			clamp_variable = { 
				var = rations_variable 
				min = 0 
				max = rations_max
			}




			set_variable = { rations_penalty = daily_rations_need }
			subtract_from_variable = { rations_penalty = rations_daily }
			divide_variable = { rations_penalty = daily_rations_need }
			multiply_variable = { rations_penalty = -1 }
			if = {
				limit = {
					check_variable = { rations_balance < 0 }
					check_variable = { rations_variable < rations_balance_int }
					NOT = {
						has_dynamic_modifier = { modifier = rations_effects }
					}
				}
				add_dynamic_modifier = { modifier = rations_effects }
			}


			##### interface

			set_variable = { rations_h = rations_variable }
			multiply_variable = { rations_h = 1000 }

			set_variable = { rations_daily_h = rations_daily }
			multiply_variable = { rations_daily_h = 1000 }

			set_variable = { rations_need_h = daily_rations_need }
			multiply_variable = { rations_need_h = 1000 }

			set_variable = { potential_need_h = potential_consumption_max }
			multiply_variable = { potential_need_h = 1000 }

			set_variable = { rations_max_h = rations_max }
			multiply_variable = { rations_max_h = 1000 }

			set_variable = { potential_consumption_h = potential_consumption_max }
			multiply_variable = { potential_consumption_h = 1000 }

			set_variable = { rations_ratio_var = rations_variable }
			divide_variable = { rations_ratio_var = rations_max }
			multiply_variable = { rations_ratio_var = 100 }

			set_variable = { rations_days_to_full = rations_max }
			subtract_from_variable = { rations_days_to_full = rations_variable }
			divide_variable = { rations_days_to_full = rations_balance }

			set_variable = { rations_days_to_empty = rations_variable }
			divide_variable = { rations_days_to_empty = rations_balance }
			multiply_variable = { rations_days_to_empty = -1 }

			if = {
				limit = {
					check_variable = { rations_balance > 0 }
				}
				set_variable = { rations_frame_var = 2 }
			}
			if = {
				limit = {
					check_variable = { rations_variable = rations_max }
				}
				set_variable = { rations_frame_var = 1 }
			}
			if = {
				limit = {
					check_variable = { rations_balance < 0 }
				}
				set_variable = { rations_frame_var = 3 }
			}

		}
	}

}